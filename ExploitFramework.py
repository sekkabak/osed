import socket
from struct import pack
from typing import List

RED, GREEN, BLUE, MAGENTA, RESET = "\033[31m", "\033[32m", "\033[34m", "\033[35m", "\033[0m"

# Example usage
print(f"{RED}This text is red!{RESET}")
print(f"{GREEN}This text is green!{RESET}")
print(f"{BLUE}This text is blue!{RESET}")
print(f"{MAGENTA}This text is magenta!{RESET}")

class BadChars:
    """
    A class to manage bad characters and provide a filtered list of valid bytes.
    """
    def __init__(self, additional = b''):
        """
        Args:
            additional (bytes, optional): Provide finded bad chars
        """        
        self.bad_chars = b'\x00'
        for c in additional:
            self.bad_chars += c.to_bytes()
    
    def getCharsArray(self) -> bytes:
        """Generate a bytes object of valid bytes, excluding bad characters.

        Returns:
        bytes: A bytes object containing all valid byte values (0-255), excluding those in self.bad_chars.
        """           
        all_possible_bytes =    (
            b"\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10"
            b"\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20"
            b"\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30"
            b"\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40"
            b"\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50"
            b"\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60"
            b"\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70"
            b"\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80"
            b"\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90"
            b"\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0"
            b"\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0"
            b"\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0"
            b"\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0"
            b"\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0"
            b"\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0"
            b"\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff")
        return bytes(c for c in all_possible_bytes if c not in self.bad_chars)

    def getBadChars(self) -> bytes:     
        return self.bad_chars

class RopDecoder:
    pass

class RopChain:
    """
    A class for building and manipulating Return-Oriented Programming (ROP) chains.
    """
    def __init__(self, base=0x0, pack_str='<I', chain=b'', junk_address=0x41414141):
        """
        Initializes the ROP chain.

        Parameters:
            base (int): A base address to add to relative addresses (default: 0x0).
            pack_str (str): Packing format for addresses (default: '<I', little-endian, 4-byte unsigned int).
            chain (bytes): Initial ROP chain (default: empty).
            junk_address (int): A junk slot in stack. Preferable a ret; instruction
        """
        self.chain = chain
        self.base = base
        self.pack_str = pack_str
        self.junk_address = junk_address

    def __iadd__(self, other):
        """
        Adds an address or raw bytes to the chain.
        Used with += operation to chain object
        """
        if isinstance(other, int):
            self.chain += pack(self.pack_str,self.base + other)
        elif isinstance(other, bytes):
            self.chain += other
        else:
            raise NotImplementedError
        return self

    def __len__(self) -> int:
        return len(self.chain)

    def addJunk(self, address:bytes = None):
        """
        Appends single junk address to the chain.

        Args:
            address (bytes, optional): Alternative junk address
        """        
        address = address or self.junk_address
        self.chain += pack(self.pack_str, address)

    @staticmethod
    def p32(address, base=0x0, pack_str='<I') -> bytes:
        """
        Static method to pack an address with an optional base.

        Parameters:
            address (int): The address to pack.
            base (int): The base address to add to `address` (default: 0x0).
            pack_str (str): Packing format (default: '<I').

        Returns:
            bytes: Packed bytes of the address.
        """
        return pack(pack_str, base + address)
    
    def append_raw(self, address: bytes):
        """
        Appends a raw address to the chain.
        """
        self.chain += address

def checkForBadChars(buffer: bytes, bad_chars: bytes):
    i = 0
    for byte in buffer:
        if byte in bad_chars:
            print(f"[!] Wrong CHAR detected! Index: {i}")
            for a in range(i-8,i+8,1):
                if a == i:
                    print(f"---> {a}: {buffer[a]}")
                else:
                    print(f"{a}: {buffer[a]}")
            raise SystemExit
        i+=1

def intToHex(value, width=0, uppercase=False):
    hex_value = f"{value:0{width}{'X' if uppercase else 'x'}}"
    return hex_value

def neg(value):
    return (-value) & 0xffffffff

def getShellcode(nop_slide=16):
    pass

def getPattern(bad_chars: bytes):
    checkForBadChars()
    pass